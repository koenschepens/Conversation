#!/usr/bin/python
import time
import RPi.GPIO as GPIO
from daemon import runner
from subprocess import call

class Barry():
    def __init__(self):
	self.hoorn = 21
        self.buzzer = 26

        self.stdin_path = '/dev/null'
        self.stdout_path = '/dev/tty'
        self.stderr_path = '/dev/tty'
        self.pidfile_path =  '/tmp/barry.pid'
        self.pidfile_timeout = 5
	GPIO.setmode(GPIO.BCM)
        GPIO.cleanup()
        GPIO.setup(self.hoorn, GPIO.IN, pull_up_down = GPIO.PUD_DOWN)
        GPIO.setup(self.buzzer, GPIO.OUT)
    def run(self):
        new=True
        while True:
            rang=False
            if(GPIO.input(self.hoorn) == 0):
                rang=False
		t1_stop = threading.Event()
  		t1 = threading.Thread(target=phoneUp, args=(self))
            if(GPIO.input(self.hoorn) == 1):
		if(new):
			print("Phone is down")
			new=False
		else:
			print("Hung up")
	                call(["/home/osmc/Pi/PiAUISuite/KodiTools/say","You hung up"]) 
			while (GPIO.input(self.hoorn) == 1):
				#wait until someone picks up the phone
				print("Ringing...")
				GPIO.output(self.buzzer, True)
				time.sleep(1)
				GPIO.output(self.buzzer, False)
				print("Not ringing")
				rang=True
    def close(self):
        GPIO.cleanup()
    
    def phoneUp(self):
	print("Picked up the phone")
		#say hello
		call(["/home/osmc/Pi/PiAUISuite/ReadSpeaker/sayhello"])
                print("Starting voice command")
                #call voicecommand daemon
                call(["/home/osmc/Pi/PiAUISuite/VoiceCommand/voicecommand", "-f", "/home/osmc/Pi/PiAUISuite/VoiceCommand/.commands.conf"])
                while(GPIO.input(self.hoorn) == 0):
                        call(["/home/osmc/Pi/PiAUISuite/ReadSpeaker/anythingelse"])
                        call(["/home/osmc/Pi/PiAUISuite/VoiceCommand/voicecommand", "-f", "/home/osmc/Pi/PiAUISuite/VoiceCommand/.commands.conf"])
                        #wait until hanging up...
                        time.sleep(1)	

barry = Barry()
daemon_runner = runner.DaemonRunner(barry)
daemon_runner.do_action()
